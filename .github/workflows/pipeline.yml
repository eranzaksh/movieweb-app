name: pipeline

on: [push]

env:
  EKS_CLUSTER_NAME: tf-movies 
  AWS_REGION: eu-north-1
  DOMAINS: eranmovies


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py') --fail-under=5

    - name: Get commit hash
      id: vars
      run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV    
        
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
    - name: Build Docker image
      run: docker build -t eranzaksh/moviesapp:"${{ env.COMMIT_HASH }}" app/.
      
    - name: Push Docker image to Docker Hub
      run: docker push eranzaksh/moviesapp:"${{ env.COMMIT_HASH }}"

    - name: Install yq
      run: |
          sudo apt-get update && sudo apt-get install -y yq

    - name: Update Helm values with Git Commit Hash
      run: |
        yq eval -i -y '.image.tag = env(COMMIT_HASH)' ./helm/values.yaml
    - name: Connect to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy and upgrade app as helm package
      run: |
        helm upgrade --install movies ./helm \
        --set db.user=${{ env.DB_USER }} \
        --set db.server=${{ env.DB_SERVER }} \
        --set db.password=${{ secrets.DB_PASSWORD }} \ 
        --set secret.api=${{ secrets.API_KEY }}

    - name: Update DuckDNS with Load Balancer IP
      run: |
        export LbDnsName=$(kubectl get svc -n ingress-nginx | awk '{print $4}' | sed -n '2p')
        export CLB_IP=$(nslookup ${LbDnsName} | grep 'Address' | tail -n1 | awk '{print $2}')
        echo "DUCKDNS_URL=https://www.duckdns.org/update?domains=${{ env.DOMAINS }}&token=${{ secrets.DUCK_TOKEN }}" >> $GITHUB_ENV
        curl "$DUCKDNS_URL&ip=$CLB_IP"